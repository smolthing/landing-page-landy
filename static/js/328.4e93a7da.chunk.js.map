{"version":3,"file":"static/js/328.4e93a7da.chunk.js","mappings":"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","sources":["components/ContentBlock/LeftContentBlock/styles.ts","components/ContentBlock/LeftContentBlock/index.tsx","components/ContentBlock/RightContentBlock/styles.ts","components/ContentBlock/RightContentBlock/index.tsx","components/ContentBlock/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { theme } from '../../../styles/colors';\r\n\r\nexport const LeftContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 10rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: ${theme.text};\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 13px;\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Image } from \"../../../common/Image\";\r\nimport { ContentBlockProps } from \"../types\";\r\nimport { Reveal } from \"react-awesome-reveal\";\r\nimport { keyframes } from \"@emotion/react\";\r\nimport {\r\n  LeftContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n} from \"./styles\";\r\n\r\nconst slide = keyframes`\r\n  from {\r\n    transform: translate3d(-100px, 0, 0);\r\n  }\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`;\r\n\r\nconst LeftContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  t,\r\n  id,\r\n}: ContentBlockProps) => {\r\n  return (\r\n    <LeftContentSection>\r\n      <Reveal keyframes={slide} duration={1000} triggerOnce={true}>\r\n        <Row justify=\"space-between\" align=\"middle\" id={id}>\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <Image src={icon} width=\"100%\" height=\"100%\" />\r\n          </Col>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <h6>{t(title)}</h6>\r\n              <Content>{t(content)}</Content>\r\n              <ServiceWrapper>\r\n                <Row justify=\"space-between\">\r\n                  {typeof section === \"object\" &&\r\n                    section.map((item: any, id: number) => {\r\n                      return (\r\n                        <Col key={id} span={11}>\r\n                          <Image src={item.icon} width=\"60px\" height=\"60px\" />\r\n                          <MinTitle>{t(item.title)}</MinTitle>\r\n                          <MinPara>{t(item.content)}</MinPara>\r\n                        </Col>\r\n                      );\r\n                    })}\r\n                </Row>\r\n              </ServiceWrapper>\r\n            </ContentWrapper>\r\n          </Col>\r\n        </Row>\r\n      </Reveal>\r\n    </LeftContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(LeftContentBlock);\r\n","import styled from \"styled-components\";\r\n\r\nexport const RightBlockContainer = styled(\"section\")`\r\n  position: relative;\r\n  padding: 5rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 8rem 0 6rem;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    padding: 4rem 0 3rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-bottom: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: start;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Image } from \"../../../common/Image\";\r\nimport { Button } from \"../../../common/Button\";\r\nimport { ContentBlockProps } from \"../types\";\r\nimport { Reveal } from \"react-awesome-reveal\";\r\nimport { keyframes } from \"@emotion/react\";\r\nimport {\r\n  RightBlockContainer,\r\n  Content,\r\n  ContentWrapper,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\nimport { theme } from '../../../styles/colors';\r\n\r\nconst fade = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(50px, 0, 0);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`;\r\n\r\nconst RightBlock = ({\r\n  title,\r\n  content,\r\n  button,\r\n  icon,\r\n  t,\r\n  id,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  const handleButtonClick = (item: any) => {\r\n    if (item.link) {\r\n      window.open(item.link, \"_blank\");\r\n      return;\r\n    }\r\n    if (item.scrollTo) {\r\n      scrollTo(item.scrollTo);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RightBlockContainer>\r\n      <Reveal keyframes={fade} duration={1500} triggerOnce={true}>\r\n        <Row justify=\"space-between\" align=\"middle\" id={id}>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <h6>{t(title)}</h6>\r\n              <Content>{t(content)}</Content>\r\n              <ButtonWrapper>\r\n                {typeof button === \"object\" &&\r\n                  button.map((item: any, id: number) => {\r\n                    return (\r\n                      <Button\r\n                        key={id}\r\n                        color={item.isAlternateColor && theme.buttonAlternate}\r\n                        onClick={() => handleButtonClick(item)}\r\n                      >\r\n                        {t(item.title)}\r\n                      </Button>\r\n                    );\r\n                  })}\r\n              </ButtonWrapper>\r\n            </ContentWrapper>\r\n          </Col>\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <Image src={icon} width=\"100%\" height=\"100%\" />\r\n          </Col>\r\n        </Row>\r\n      </Reveal>\r\n    </RightBlockContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(RightBlock);\r\n","import LeftContentBlock from \"./LeftContentBlock\";\r\nimport RightContentBlock from \"./RightContentBlock\";\r\nimport { ContentBlockProps } from \"./types\";\r\n\r\nconst ContentBlock = (props: ContentBlockProps) => {\r\n  if (props.type === \"left\") return <LeftContentBlock {...props} />;\r\n  if (props.type === \"right\") return <RightContentBlock {...props} />;\r\n  return null;\r\n};\r\n\r\nexport default ContentBlock;\r\n"],"names":["LeftContentSection","styled","_templateObject","_taggedTemplateLiteral","Content","_templateObject2","ContentWrapper","_templateObject3","ServiceWrapper","_templateObject4","MinTitle","_templateObject5","theme","text","MinPara","_templateObject6","slide","keyframes","withTranslation","_ref","icon","title","content","section","t","id","_jsx","children","Reveal","duration","triggerOnce","_jsxs","Row","justify","align","Col","lg","md","sm","xs","Image","src","width","height","map","item","span","RightBlockContainer","ButtonWrapper","fade","button","handleButtonClick","link","window","open","scrollTo","document","getElementById","scrollIntoView","behavior","Button","color","isAlternateColor","buttonAlternate","onClick","props","type","LeftContentBlock","RightContentBlock"],"sourceRoot":""}